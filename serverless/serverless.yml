service: wireguard-manager
frameworkVersion: '3'
provider:
  name: aws
  stage: ${opt:stage, 'stg'}
  region: us-west-2
params:
  default:
    VpcId: ${param:vpc-id, null}
    SubnetId: ${param:vpc-subnet-id, null}
    PemKeyName: ${param:pem-key-name, null}
    WgManagerVersion: ${param:wg-manager-version, 'latest'}
resources: # CloudFormation template syntax
  Resources:
    WireguardManagerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WireguardManagerRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        Policies:
          - PolicyName: WireguardManagerPolicy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/wireguard-manager-vpn-servers-${self:provider.stage}
                    - arn:aws:dynamodb:*:*:table/wireguard-manager-peers-${self:provider.stage}
                - Effect: Allow
                  Action:
                    - ssm:GetCommandInvocation
                  Resource:
                    - arn:aws:ssm:*:*:*
                - Effect: Allow
                  Action:
                    - ssm:SendCommand
                  Resource:
                    - arn:aws:ec2:*:*:instance/*
                    - arn:aws:ssm:*::document/AWS-RunShellScript
    WireguardManagerVpnServersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: wireguard-manager-vpn-servers-${self:provider.stage}
    WireguardManagerPeersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: peer_id
            AttributeType: S
        KeySchema:
          - AttributeName: peer_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: wireguard-manager-peers-${self:provider.stage}
    WireguardManagerIamInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: WireguardManagerIamInstanceProfile-${self:provider.stage}
        Roles:
          - !Ref WireguardManagerRole
    WireguardManagerInstance:
      Type: AWS::EC2::Instance
      Properties:
        Tags:
          - Key: Name
            Value: WireguardManager-${self:provider.stage}
        ImageId: ami-05f991c49d264708f
        KeyName: ${param:PemKeyName}
        InstanceType: t2.micro
        IamInstanceProfile: !Ref WireguardManagerIamInstanceProfile
        SubnetId: ${param:SubnetId}
        SecurityGroupIds:
          - !Ref WireguardManagerSecurityGroup
        UserData:
          Fn::Base64: "#!/bin/bash\napt-get update -y\napt -y install curl apt-transport-https ca-certificates software-properties-common gnupg\ninstall -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg \nsudo chmod a+r /etc/apt/keyrings/docker.gpg\nchmod a+r /etc/apt/keyrings/docker.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\napt-get update -y\n\napt install docker.io -y\napt install docker-compose-plugin -y\nsystemctl start docker\ndocker image pull public.ecr.aws/g0d6f2g5/wireguard-manager:${param:WgManagerVersion}\ndocker run -d --restart on-failure --name wg-manager -e ENVIRONMENT=${self:provider.stage} -e UVICORN_HOST=0.0.0.0 -p 80:5000 -d public.ecr.aws/g0d6f2g5/wireguard-manager:${param:WgManagerVersion}\n"
    WireguardManagerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: WireguardManagerSecurityGroup-${self:provider.stage}
        GroupDescription: Wireguard Manager Security Group
        VpcId: ${param:VpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            Description: Allow access to the Swagger API
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
configValidationMode: error
# The sections below are used for development
plugins:
  - serverless-dynamodb
custom:
  dynamodb:
    stages:
      - local-dev
    start:
      docker: true
      port: 8000
      migrate: true
      noStart: true
