service: wireguard-manager
frameworkVersion: '4'
provider:
  name: aws
  stage: ${opt:stage, 'stg'}
  region: us-west-2
resources: # CloudFormation template syntax
  Resources:
    WireguardManagerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: wireguard_manager_role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - tasks.apprunner.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: wireguard_manager_policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: VisualEditor0
                  Effect: Allow
                  Action:
                    - dynamodb:Scan
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/wireguard-manager-vpn-servers-*
                    - arn:aws:dynamodb:*:*:table/wireguard-manager-peers-*
    WireguardManagerKsmKey:
      Type: AWS::KMS::Key
      Properties:
        Description: Wireguard Manager KSM Key
        Enabled: true
        EnableKeyRotation: false
        KeySpec: SYMMETRIC_DEFAULT
        KeyUsage: ENCRYPT_DECRYPT
        MultiRegion: false
        Origin: AWS_KMS
    #WireguardManagerKsmKeyAlias:
    #  Type: AWS::KMS::Alias
    #  Properties:
    #    AliasName: alias/wireguard-manager-kms-${self:provider.stage}
    #    TargetKeyId: !Ref WireguardManagerKsmKey
    WireguardManagerVpnServersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: wireguard-manager-vpn-servers-${self:provider.stage}
    WireguardManagerPeersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: peer_id
            AttributeType: S
        KeySchema:
          - AttributeName: peer_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'wireguard-manager-peers-${self:provider.stage}'
    AppRunnerVpcConnector:
      Type: AWS::AppRunner::VpcConnector
      Properties:
        VpcConnectorName: !Sub "${AWS::StackName}-connector"
        Subnets:
          - subnet-0036b48ca860d8384 # ← your private subnet IDs
          - subnet-07f3e513061047c31
        SecurityGroups:
          - sg-00a7b142533f3d335 # ← SG allowing outbound to DB port
    WireguardManagerAppRunner:
      Type: AWS::AppRunner::Service
      Properties:
        EncryptionConfiguration:
          KmsKey: !GetAtt WireguardManagerKsmKey.Arn
        HealthCheckConfiguration:
          HealthyThreshold: 1
          Interval: 10
          Protocol: TCP
          Timeout: 5
          UnhealthyThreshold: 5
        InstanceConfiguration:
          InstanceRoleArn: arn:aws:iam::${aws:accountId}:role/wireguard_manager_role
        NetworkConfiguration:
          EgressConfiguration:
            EgressType: VPC
            VpcConnectorArn: !Ref AppRunnerVpcConnector
          IngressConfiguration:
            IsPubliclyAccessible: False
          IpAddressType: IPV4
        ObservabilityConfiguration:
          ObservabilityEnabled: False
        ServiceName: wireguard-manager-${self:provider.stage}
        SourceConfiguration:
          AutoDeploymentsEnabled: False
          ImageRepository:
            ImageConfiguration:
              Port: 8080
              RuntimeEnvironmentVariables:
                - Name: UVICORN_HOST
                  Value: 0.0.0.0
                - Name: UVICORN_PORT
                  Value: 8080
                - Name: ENVIRONMENT
                  Value: ${self:provider.stage}
                - Name: AWS_REGION
                  Value: ${self:provider.region}
            ImageIdentifier: public.ecr.aws/g0d6f2g5/wireguard-manager:0.0.1
            ImageRepositoryType: ECR_PUBLIC
configValidationMode: error
# The sections below are used for development
plugins:
  - serverless-dynamodb
custom:
  dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      migrate: true
      noStart: true
